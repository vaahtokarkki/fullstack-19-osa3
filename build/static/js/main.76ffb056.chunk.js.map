{"version":3,"sources":["components/AddPersonForm.js","components/FilterPersons.js","components/Person.js","components/PersonsList.js","components/Notification.js","services/persons.js","App.js","serviceWorker.js","index.js"],"names":["AddPersonForm","_ref","onSubmit","onNameChange","newName","newPhone","onPhoneChange","react_default","a","createElement","value","onChange","type","FilterPersons","filter","onFilterChange","Person","person","onDelete","name","number","onClick","PersonsList","persons","map","p","components_Person","key","id","Notification","message","style","backgroundColor","color","border","padding","margin","width","errorStyle","Object","objectSpread","text","error","baseUrl","services_persons","axios","get","then","res","data","newPerson","post","put","concat","delete","App","_useState","useState","_useState2","slicedToArray","setPersons","_useState3","_useState4","setNewName","_useState5","_useState6","setNewPhone","_useState7","_useState8","setFilter","_useState9","_useState10","setMessage","clearForm","resetMessage","setTimeout","useEffect","personService","className","components_FilterPersons","e","target","components_Notification","components_AddPersonForm","event","preventDefault","length","duplicate","find","window","confirm","catch","err","components_PersonsList","toLowerCase","includes","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.76ffb056.chunk.js","sourcesContent":["import React from 'react'\n\nconst AddPersonForm = ({onSubmit, onNameChange, newName, newPhone, onPhoneChange}) => {\n    return (\n        <div>\n            <h3>Lisää uusi henkilö</h3>\n        <form onSubmit={onSubmit}>\n            <div>\n                nimi: <input value={newName} onChange={onNameChange} /><br />\n                numero: <input value={newPhone} onChange={onPhoneChange} />\n            </div>\n            <div>\n                <button type=\"submit\">Lisää</button>\n            </div>\n        </form>\n        </div>\n    )\n}\n\nexport default AddPersonForm","import React from 'react'\n\nconst FilterPersons = ({filter, onFilterChange}) => {\n    return (\n        <div>\n            <h3>Suodata henkilöitä</h3>\n            <input value={filter} onChange={onFilterChange} />\n        </div>\n    )\n}\n\nexport default FilterPersons","import React from 'react'\n\nconst Person = ({ person, onDelete }) => {\n    return (\n        <div>\n            {person.name} - {person.number} <button onClick={() => onDelete(person)}>Poista</button>\n        </div>\n    )\n}\n\nexport default Person","import React from 'react'\n\nimport Person from './Person'\n\nconst PersonsList = ({ persons, onDelete }) => {\n    const rows = () => persons.map(p => <Person person={p} key={p.id} onDelete={onDelete}/>)\n    return (\n        <div>\n            <h2>Numerot</h2>\n            {rows()}\n        </div>\n    )\n}\n\nexport default PersonsList","import React from 'react'\n\nconst Notification = ({ message }) => {\n    const style = {\n        backgroundColor: 'lightgreen',\n        color: 'darkgreen',\n        border: '2px solid darkgreen',\n        padding: 15,\n        margin: 20,\n        width: \"20%\"\n    }\n\n    const errorStyle = {\n        ...style,\n        backgroundColor: 'lightcoral',\n        color: 'darkred',\n        border: '2px solid darkred',\n    }\n\n    if (message == null || message.text === null) return null\n\n    if (!message.error) {\n        return (\n            <div style={style}>{message.text}</div>\n        )\n    }\n\n\n\n    return (\n        <div style={errorStyle}>{message.text}</div>\n    )\n}\n\nexport default Notification","import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n    return axios\n        .get(baseUrl)\n        .then(res => res.data)\n}\n\nconst create = newPerson => {\n    return axios\n        .post(baseUrl, newPerson)\n        .then(res => res.data)\n}\n\nconst updatePerson = (id, newPerson) => {\n    return axios\n        .put(`${baseUrl}/${id}`, newPerson)\n        .then(res => res.data)\n}\n\nconst deletePerson = id => {\n    return axios.delete(`${baseUrl}/${id}`)\n        .then(res => res.data)\n}\n\nexport default { getAll, create, updatePerson, deletePerson }","import React, { useState, useEffect } from 'react'\n\nimport AddPersonFrom from './components/AddPersonForm'\nimport FilterPersons from './components/FilterPersons'\nimport PersonsList from './components/PersonsList'\nimport Notification from './components/Notification'\n\nimport personService from './services/persons'\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newPhone, setNewPhone] = useState('')\n  const [filter, setFilter] = useState('')\n\n  const [message, setMessage] = useState({ error: true, text: null })\n\n  const handleSubmit = (event) => {\n    event.preventDefault()\n    const person = {\n      name: newName,\n      number: newPhone,\n      id: persons.length + 1\n    }\n\n    const duplicate = persons.find(p => p.name === person.name)\n    if (duplicate) {\n      if (window.confirm(`${newName} on jo luettelossa, korvataanko vanha numero uudella?`)) {\n        personService\n          .updatePerson(duplicate.id, { ...duplicate, number: newPhone })\n          .then(res => {\n            setPersons(persons.map(p => p.id !== res.id ? p : res))\n            setMessage({\n              error: false,\n              text: `Päivitettiin henkilön ${res.name} tiedot!`\n            })\n            resetMessage()\n          })\n          .catch(err => {\n            setPersons(persons.filter(p => p.id !== duplicate.id))\n            setMessage({\n              error: true,\n              text: `Henkilön ${person.name} tiedoja ei löydy!`\n            })\n            resetMessage()\n          })\n        clearForm()\n      }\n      return\n    } else {\n      personService.create(person)\n        .then(res => {\n          setPersons(persons.concat(res))\n          setMessage({\n            error: false,\n            text: `Lisättiin ${res.name}!`\n          })\n          resetMessage()\n        })\n        .catch(err => {\n          setMessage({\n            error: true,\n            text: \"Virheelliset tiedot\"\n          })\n          resetMessage()\n        })\n    }\n    clearForm()\n  }\n\n  const onPersonDelete = person => {\n    personService.deletePerson(person.id)\n      .then(res => {\n        setPersons(persons.filter(p => p.id !== person.id))\n        setMessage({\n          error: false,\n          text: `Poistettiin henkilön ${person.name} tiedot!`\n        })\n        resetMessage()\n      })\n      .catch(err => {\n        setPersons(persons.filter(p => p.id !== person.id))\n        setMessage({\n          error: true,\n          text: `Henkilön ${person.name} tiedot oli jo poistettu!`\n        })\n        resetMessage()\n      })\n  }\n\n  const clearForm = () => {\n    setNewName('')\n    setNewPhone('')\n  }\n\n  const resetMessage = () => {\n    setTimeout(() => {\n      setMessage(null)\n    }, 5000)\n  }\n\n  const onNameChange = (e) => {\n    setNewName(e.target.value)\n  }\n\n  const onPhoneChange = (e) => {\n    setNewPhone(e.target.value)\n  }\n\n  const onFilterChange = (e) => {\n    setFilter(e.target.value)\n  }\n\n  const filterPersons = () => persons.filter(p => p.name.toLowerCase().includes(filter))\n\n  useEffect(() => {\n    personService.getAll()\n      .then(res => setPersons(res))\n  }, [])\n\n  return (\n    <div className=\"container\">\n      <h2>Puhelinluettelo</h2>\n      <FilterPersons filter={filter} onFilterChange={onFilterChange} />\n\n      <Notification message={message} />\n\n      <AddPersonFrom\n        onSubmit={handleSubmit}\n        onNameChange={onNameChange}\n        newName={newName}\n        onPhoneChange={onPhoneChange}\n        newPhone={newPhone} />\n      <PersonsList persons={filterPersons()} onDelete={onPersonDelete} />\n    </div>\n  )\n\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}